"""
Django settings for dry_fruits_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url  # Import dj-database-url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- SECURITY SETTINGS (MODIFIED FOR PRODUCTION) ---

# SECRET_KEY should be set in your Railway environment variables for security.
SECRET_KEY = os.environ.get('SECRET_KEY')

# DEBUG should be False in production. It reads from an environment variable.
# It defaults to False if the DEBUG variable is not set.
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# ALLOWED_HOSTS should be set in your Railway environment variables.
# e.g., 'your-app-name.up.railway.app,www.yourdomain.com'
# The default '.railway.app' is a safe starting point for Railway deployments.
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '.railway.app').split(',')


# --- APPLICATION DEFINITION ---

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',  # Add Whitenoise for static files
    'django.contrib.staticfiles',
    
    # Third-party apps
    'crispy_forms',
    'crispy_bootstrap5',
    
    # Custom apps
    'authentication',
    'customers',
    'products',
    'billing',
    'payments',
    'reports',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add Whitenoise middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dry_fruits_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Using pathlib for consistency
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dry_fruits_project.wsgi.application'


# --- DATABASE (MODIFIED FOR RAILWAY) ---

# This configuration reads the DATABASE_URL environment variable provided by Railway.
# Ensure you have a database service (like PostgreSQL or MySQL) attached to your Railway project.
DATABASES = {
    'default': dj_database_url.config(
        conn_max_age=600,
        ssl_require=False  # Railway's private networking handles security
    )
}


# --- PASSWORD VALIDATION ---

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# --- INTERNATIONALIZATION ---

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# --- STATIC & MEDIA FILES (MODIFIED FOR PRODUCTION) ---

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / "staticfiles"

# Use Whitenoise to serve compressed and cached static files efficiently
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
# IMPORTANT: Railway has an ephemeral filesystem. This means any files you upload
# to MEDIA_ROOT will be DELETED on the next deploy. For persistent file storage,
# you should use a service like Amazon S3, Google Cloud Storage, or Cloudinary.
# The `django-storages` library can help with this.


# --- DEFAULT PRIMARY KEY FIELD TYPE ---

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- APP-SPECIFIC SETTINGS ---

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Authentication
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'
LOGIN_URL = 'login'
AUTH_USER_MODEL = 'authentication.User'
